using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;
using System.Text;using System.Reflection;using System;namespace MiniFramework{    /// <summary>
    /// 加载CSV表的基类
    /// 用法：比如加载一个角色数据表，定义2个结构
    /// 注意：
    /// 1.每一张表默认第一个字段为Int型的ID字段
    /// 2.表中某个字段的值如果是数组，请用 $ 分隔
    /*     public class RoleDatabase : TableDatabase    {            public string Name;    public string ModulePath;        }    public class RoleTable : ConfigTable<RoleDatabase, RoleTable>    {            public RoleTable()        {            Load("filePath");        }        }    */    /// </summary>    public class TableDatabase    {        public int ID;    }    public class ConfigTable<TDataBase, SingletonT> : Singleton<SingletonT>        where TDataBase : TableDatabase, new()        where SingletonT : new()    {        // Key是ID， Value是对应表中对应的字段        Dictionary<int, TDataBase> _cache = new Dictionary<int, TDataBase>();        public void Load(string tablePath)        {            // 从StreamAsset文件夹中加载CSV文件            //var table = Resources.Load<TextAsset>(tablePath);            WebRequest.Instance.LoadFileFromLocal(tablePath, (bytes) =>                {                    MemoryStream tableStream = new MemoryStream(bytes);                    using (var reader = new StreamReader(tableStream, Encoding.Default))//Encoding.GetEncoding("gb2312")                    {                        // 通过反射解析字段名                        var fieldNameStr = reader.ReadLine();                        var fieldNameArray = fieldNameStr.Split(',');                        List<FieldInfo> allFieldInfo = new List<FieldInfo>();                        foreach (var filedName in fieldNameArray)                        {                            FieldInfo fieldInfo = typeof(TDataBase).GetField(filedName);                            allFieldInfo.Add(fieldInfo);                        }                        // 下面是正式数据                        var lineStr = reader.ReadLine();                        while (lineStr != null)                        {                            ReadLine(lineStr, allFieldInfo);                            lineStr = reader.ReadLine();                        }                    }                });        }        private void ReadLine(string lineStr, List<FieldInfo> allFieldInfo)        {            // 读到内存            var itemStrArray = lineStr.Split(',');            var DB = new TDataBase();            DB.ID = int.Parse(itemStrArray[0]);            // 对每个字段            for (int i = 0; i < allFieldInfo.Count; i++)            {                var field = allFieldInfo[i];                var data = itemStrArray[i];                if (field.FieldType == typeof(int))                {                    field.SetValue(DB, int.Parse(data));                }                else if (field.FieldType == typeof(string))                {                    field.SetValue(DB, data);                }                else if (field.FieldType == typeof(float))                {                    field.SetValue(DB, float.Parse(data));                }                else if (field.FieldType == typeof(bool))                {                    //int v = int.Parse(data);                    //field.SetValue(DB, v == 1 ? true : false);                    field.SetValue(DB, bool.Parse(data));                }                else if (field.FieldType == typeof(List<int>))                {                    //CSV表中字段的内容用$区分                    var list = new List<int>();                    foreach (var itemStr in data.Split('$'))                    {                        list.Add(int.Parse(itemStr));                    }                    field.SetValue(DB, list);                }                else if (field.FieldType == typeof(List<float>))                {                    //CSV表中字段的内容用$区分                    var list = new List<float>();                    foreach (var itemStr in data.Split('$'))                    {                        list.Add(float.Parse(itemStr));                    }                    field.SetValue(DB, list);                }                else if (field.FieldType == typeof(List<string>))                {                    field.SetValue(DB, new List<string>(data.Split('$')));                }                else if (field.FieldType == typeof(Type))                {                    // 反射同一个dll的type类型，可以理解为反射一个类                    Type type = Type.GetType(data);                    field.SetValue(DB, type);                }            }            _cache[DB.ID] = DB;        }        public TDataBase this[int index]        {            get            {                TDataBase db;                _cache.TryGetValue(index, out db);                return db;            }        }        public Dictionary<int, TDataBase> GetAll()        {            return _cache;        }    }}
