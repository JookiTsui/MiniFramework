using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace MiniFramework {#if ENABLE_XLUA
    [XLua.LuaCallCSharp]#endif
    public class AudioMgr {        /// <summary>        /// 场景中是否存在Audio Sources, 默认值是false        /// </summary>
        private static bool _isAudioSourceExits = false;        /// <summary>        /// AudioSource        /// </summary>
        private static AudioSource _audioSource;        /// <summary>        /// 资源加载器, 音频资源暂不做卸载处理        /// </summary>        private static ResLoader _resLoader = new ResLoader();        private static string isEnableMusic = "isEnableMusic";        /// <summary>        /// 设定音乐是否打开        /// </summary>        /// <param name="enable"></param>        public static void SetMusicEnable(bool enable) {			if (enable) {                PlayerPrefs.SetInt(isEnableMusic, 1);			} else {                PlayerPrefs.SetInt(isEnableMusic, 0);			}		}        /// <summary>        /// 获取用户设置的背景音乐状态        /// </summary>        /// <returns></returns>        public static bool GetMusicEnableState() {            if (PlayerPrefs.GetInt(isEnableMusic, 1) == 0) {                return false;            } else {                return true;			}        }        /// <summary>        /// 播放背景音乐, audioClipName是音频名称, abName是音频所在的AssetBundle的名称        /// </summary>        /// <param name="audioClipName"></param>        /// <param name="abName"></param>
        public static void PlayMusic(string audioClipName, string abName, float volume) {            if(PlayerPrefs.GetInt(isEnableMusic, 1) == 0) {                return;			}            CheckAudioSource();            AudioClip audioClip = _resLoader.LoadSync<AudioClip>(audioClipName, abName);            if (_audioSource.clip == null || _audioSource.clip != audioClip || _audioSource.isPlaying == false) {                _audioSource.clip = audioClip;                _audioSource.playOnAwake = true;                _audioSource.loop = true;                _audioSource.volume = volume;                _audioSource.Play();            }        }        /// <summary>        /// 暂停播放背景音乐        /// </summary>        public static void PauseMusic() {            CheckAudioSource();            _audioSource.Pause();		}        /// <summary>        /// 关闭背景音乐        /// </summary>
        public static void StopMusic() {            CheckAudioSource();            _audioSource.Stop();        }        /// <summary>        /// 播放特效音乐, audioClipName是音频名称, abName是音频所在的AssetBundle的名称, volume是音量，取值范围0-1        /// </summary>        /// <param name="audioClipName"></param>        /// <param name="abName"></param>
        public static void PlaySound(string audioClipName, string abName, float volume) {            CheckAudioSource();            AudioClip audioClip = _resLoader.LoadSync<AudioClip>(audioClipName, abName);            //_audioSource.PlayOneShot(audioClip, 1);            AudioSource.PlayClipAtPoint(audioClip, Vector3.zero, volume);        }        /// <summary>        /// 调整音量, volume是音量，取值范围0-1        /// </summary>        /// <param name="volume"></param>
        public static void AdjustVolume(float volume) {            CheckAudioSource();            _audioSource.volume = volume;        }        /// <summary>        /// 设置静音        /// </summary>
        public static void Mute() {            CheckAudioSource();            _audioSource.mute = !_audioSource.mute;        }        /// <summary>        /// 检查场景中是否存在AudioSource, 不存在就自动创建一个        /// </summary>
        private static void CheckAudioSource() {            if (_isAudioSourceExits) {                return;            }            _audioSource = Object.FindObjectOfType<AudioSource>();            if (_audioSource != null) {                Object.DontDestroyOnLoad(_audioSource.gameObject);            } else {                GameObject audioSourceGO = new GameObject();                audioSourceGO.transform.localPosition = Vector3.zero;                audioSourceGO.name = "AudioSource";                Object.DontDestroyOnLoad(audioSourceGO);                _audioSource = audioSourceGO.AddComponent<AudioSource>();                _audioSource.spatialBlend = 1.0f;            }            _isAudioSourceExits = true;        }    }}
